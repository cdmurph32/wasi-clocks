package wasi:clocks@0.2.4;
/// WASI System Clock is a clock API intended to let users query the current
/// time. The clock is not necessarily monotonic as it may be reset.
///
/// It is intended to be portable at least between Unix-family platforms and
/// Windows.
///
/// An "instant", or "exact time", is a point in time without regard to any time
/// zone: just the time since a particular external reference point, often
/// called an "epoch".
///
/// External references may be reset, so this clock is not necessarily
/// monotonic, making it unsuitable for measuring elapsed time.
///
/// It is intended for reporting the current date and time for humans.
@since(version = 0.2.0)
interface system-clock {
    /// An exact time in seconds plus nanoseconds.
    @since(version = 0.2.0)
    record instant {
        seconds: u64,
        nanoseconds: u32,
    }

    /// Read the current value of the clock.
    ///
    /// This clock is not monotonic, therefore calling this function repeatedly
    /// will not necessarily produce a sequence of non-decreasing values.
    ///
    /// The returned timestamps represent the number of seconds since
    /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
    /// also known as [Unix Time].
    ///
    /// The nanoseconds field of the output is always less than 1000000000.
    ///
    /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
    /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
    @since(version = 0.2.0)
    now: func() -> instant;

    /// Query the resolution of the clock.
    ///
    /// The nanoseconds field of the output is always less than 1000000000.
    @since(version = 0.2.0)
    resolution: func() -> instant;
    // NOTE: This return value doesn't represent an exact time, so maybe is not
    // a correct use of the Instant type. Would it make sense to have a
    // system-clock::duration analogous to monotonic-clock::duration?
}
